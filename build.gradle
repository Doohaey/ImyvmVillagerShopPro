import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id "fabric-loom"
	id "maven-publish"
	id "org.jetbrains.kotlin.jvm"
	id "org.jetbrains.kotlin.plugin.serialization" version "2.0.20-Beta2"
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

version = project["mod_version"]
group = project["maven_group"]

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	mavenCentral()
	// Imyvm Hoki
	maven {
		url = uri("https://maven.imyvm.org")
	}

	maven {
		url = "https://maven.pkg.github.com/ImyvmCircle/ImyvmEconomy"
		credentials {
			username = System.getenv("GITHUB_USERNAME")
			password = System.getenv("GITHUB_TOKEN")
		}
	}

	maven {
		url = "https://maven.pkg.github.com/ImyvmCircle/HoKi"
		credentials {
			username = System.getenv("GITHUB_USERNAME")
			password = System.getenv("GITHUB_TOKEN")
		}
	}

	maven {
		name = "JP Mods"
		url = "https://maven.jpcode.dev"
	}

	// Fabric Permissions Api
	maven {
		url = "https://oss.sonatype.org/content/repositories/snapshots"
	}

	// io.github.ladysnake:PlayerAbilityLib
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroupByRegex 'io\\.github\\.onyxstudios.*'
		}
	}

	maven {
		url = "https://maven.nucleoid.xyz"
	}
	mavenLocal()

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")


	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
	modImplementation("com.mojang:brigadier:${project.brigadier_version}")

	modImplementation("com.imyvm:imyvm-hoki:${project.imyvm_hoki_version}")
	modImplementation("com.imyvm:imyvm-economy:${project.imyvm_economy_version}")

	modImplementation("net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}")
	modImplementation("me.lucko:fabric-permissions-api:${project.fabric_permissions_api_version}")
	modImplementation("eu.pb4:sgui:${project.sgui_version}")
	modImplementation "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"
	include "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"
	implementation("org.jetbrains.exposed:exposed-core:${project.exposed_version}")
	include("org.jetbrains.exposed:exposed-core:${project.exposed_version}")
	implementation("org.jetbrains.exposed:exposed-jdbc:${project.exposed_version}")
    include("org.jetbrains.exposed:exposed-jdbc:${project.exposed_version}")
	implementation("com.zaxxer:HikariCP:${project.HikariCP_version}")
	include("com.zaxxer:HikariCP:${project.HikariCP_version}")
	implementation("com.h2database:h2:${project.h2database_version}")
	include("com.h2database:h2:${project.h2database_version}")
	implementation("org.postgresql:postgresql:${project.postgresql_version}")
	include("org.postgresql:postgresql:${project.postgresql_version}")
	implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.1")
	implementation("com.typesafe:config:${project.typesafe_version}")
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(KotlinCompile).configureEach {
	kotlinOptions {
		jvmTarget = 21
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

tasks.jar {
	from("LICENSE")
}

// configure the maven publication
